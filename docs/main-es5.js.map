{"version":3,"sources":["webpack:///src/app/nav-bar/nav-bar.component.ts","webpack:///src/app/nav-bar/nav-bar.component.html","webpack:///src/environments/environment.ts","webpack:///src/app/landing/landing.component.ts","webpack:///src/app/landing/landing.component.html","webpack:///src/app/post-brew/post-brew.component.ts","webpack:///src/app/post-brew/post-brew.component.html","webpack:///src/app/misc/misc.component.ts","webpack:///src/app/misc/misc.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/pre-brew/pre-brew.component.ts","webpack:///src/app/pre-brew/pre-brew.component.html","webpack:///src/app/corrections/corrections.component.ts","webpack:///src/app/corrections/corrections.component.html","webpack:///src/app/app-routing.module.ts","webpack:///src/main.ts","webpack:///$_lazy_route_resource lazy namespace object"],"names":["NavBarComponent","environment","production","LandingComponent","dialog","targetMashTemp","grainWeight","absRate","evapRate","mashTunLoss","targetOg","batchVol","collectedPreboilVol","measuredGrav","targetGrav","currWeight","emptyWeight","specificGrav","potentialGrav","measuredOG","measuredFG","onChanges","vals","mainGroup","getRawValue","preBrewCalcsFG","brewCorrectionsFG","volMeasuringFG","postBrewFG","strikeTemp","mashThickness","grainTemp","strikeVol","absVol","preboilVol","firstRunningsVol","spargeVol","targetSG","convertToPts","preboilSG","estPreboilGrav","convertToGrav","dmeAdd","currVol","efficiency","abv","valueChanges","subscribe","val","a","b","grav","pts","PostBrewComponent","MiscComponent","miscFG","AppComponent","title","AppModule","PreBrewComponent","CorrectionsComponent","correctionsFG","appRoutes","path","component","pathMatch","AppRoutingModule","forRoot","bootstrapModule","err","console","error","webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id"],"mappings":"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","file":"main-es5.js","sourcesContent":["import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'nav-bar',\r\n  templateUrl: './nav-bar.component.html',\r\n  styleUrls: ['./nav-bar.component.css']\r\n})\r\nexport class NavBarComponent {\r\n}","<mat-toolbar color=\"primary\">\r\n    <span>Brew Sidekick</span>\r\n    <span></span>\r\n    <button mat-button [routerLink]=\"'pre-brew'\">\r\n        Pre Brew\r\n    </button>\r\n    <button mat-button [routerLink]=\"'post-brew'\">\r\n        Post Brew\r\n    </button>\r\n    <button mat-button [routerLink]=\"'corrections'\">\r\n        Corrections\r\n    </button>\r\n    <button mat-button [routerLink]=\"'misc'\">\r\n        Misc\r\n    </button>\r\n</mat-toolbar>","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from \"@angular/core\";\r\nimport { Form, FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\n\r\n@Component({\r\n    selector: \"app-landing\",\r\n    templateUrl: \"./landing.component.html\",\r\n    styleUrls: [\"./landing.component.css\"]\r\n})\r\nexport class LandingComponent implements OnInit {\r\n    \r\n    // Pre Brew Calculations\r\n    // - Strike Temp\r\n    // - Strike Vol\r\n    // - Abs Vol\r\n    // - First Runnings Vol\r\n    // - Sparge Vol\r\n    // - Est Pre Boil Grav\r\n    // - Pre Boil Vol\r\n    public targetMashTemp = 152.0;\r\n    public grainWeight = 10.0;\r\n    public absRate = 0.125;\r\n    public evapRate = 0.5;\r\n    public mashTunLoss = 0.21;\r\n    public targetOg = 1.060;\r\n    public batchVol = 5.0;\r\n    \r\n    public mashThickness: number; // .3125gal/lb\r\n    public grainTemp: number;\r\n    public strikeTemp: number; //(.2/(4*mashThickness))(targetMashTemp - grainTemp) + targetMashTemp\r\n    public strikeVol: number; // grainWeight*mashThickness\r\n    public absVol: number; // grainWeight * absRate\r\n    public preboilVol: number; // batchVol + evapRate * boilHrs\r\n    public firstRunningsVol: number; // strikeVol - (absVol + mashTunLoss)\r\n    public spargeVol: number; // preboilVol - firstRunningsVol\r\n    public estPreboilGrav: number; // (targetOg*targetVol)/preboilVol\r\n    \r\n    // Brew Corrections\r\n    // - Raise Pre Boil Grav\r\n    public collectedPreboilVol = 6.0;\r\n    public measuredGrav = 1.045;\r\n    public targetGrav = 1.065;\r\n    // Weight of addition = (Volume of wort * (Target gravity – Measured gravity)) / Extract potential points of addition\r\n    // Light DME Potential Extract: 1.045\r\n    public dmeAdd: number;\r\n    \r\n    // Volume Measuring\r\n    // Assuming holding pot and standing on scale\r\n    // 8.32lbs/gal = 1kg/L\r\n    // vol = (currWeight-emptyWeight)/(8.32*specificGrav)\r\n    public currWeight = 12.0;\r\n    public emptyWeight = 3.0;\r\n    public specificGrav = 1.061;\r\n    public currVol: number;\r\n    \r\n    // Post Brew Calculations\r\n    // - Efficiency\r\n    // - ABV\r\n    public potentialGrav = 1.084;\r\n    public measuredOG = 1.059;\r\n    public measuredFG = 1.060;\r\n    public efficiency: number;\r\n    public abv: number;\r\n\r\n    \r\n    public mainGroup: FormGroup;\r\n\r\n\r\n    constructor(private dialog: MatDialog){\r\n    }\r\n    \r\n    ngOnInit(): void {\r\n        this.mainGroup = new FormGroup({\r\n            preBrewCalcsFG: new FormGroup({\r\n                targetOg: new FormControl(this.targetOg),\r\n                batchVol: new FormControl(this.batchVol),\r\n                targetMashTemp: new FormControl(this.targetMashTemp),\r\n                grainWeight: new FormControl(this.grainWeight),\r\n                absRate: new FormControl(this.absRate),\r\n                mashTunLoss: new FormControl(this.mashTunLoss),\r\n                evapRate: new FormControl(this.evapRate),\r\n            }),\r\n            brewCorrectionsFG: new FormGroup({\r\n                collectedPreboilVol: new FormControl(this.collectedPreboilVol),\r\n                measuredGrav: new FormControl(this.measuredGrav),\r\n                targetGrav: new FormControl(this.targetGrav),\r\n            }),\r\n            volMeasuringFG: new FormGroup({\r\n                currWeight: new FormControl(this.currWeight),\r\n                emptyWeight: new FormControl(this.emptyWeight),\r\n                specificGrav: new FormControl(this.specificGrav),\r\n            }),\r\n            postBrewFG: new FormGroup({\r\n                potentialGrav: new FormControl(this.potentialGrav),\r\n                measuredOG: new FormControl(this.measuredOG),\r\n                measuredFG: new FormControl(this.measuredFG)\r\n            })\r\n        });\r\n        this.mashThickness = .3125;\r\n        this.grainTemp = 68;\r\n\r\n        this.mainGroup.valueChanges.subscribe(val => {\r\n            this.onChanges();\r\n        });\r\n\r\n        this.onChanges();\r\n    }\r\n\r\n    public onChanges = (): void => {\r\n\r\n        let vals = this.mainGroup.getRawValue();\r\n        this.targetMashTemp = vals.preBrewCalcsFG.targetMashTemp;\r\n        this.grainWeight = vals.preBrewCalcsFG.grainWeight;\r\n        this.batchVol = vals.preBrewCalcsFG.batchVol;\r\n        this.evapRate = vals.preBrewCalcsFG.evapRate;\r\n        this.absRate = vals.preBrewCalcsFG.absRate;\r\n        this.mashTunLoss = vals.preBrewCalcsFG.mashTunLoss;\r\n        this.targetOg = vals.preBrewCalcsFG.targetOg;\r\n        this.collectedPreboilVol = vals.brewCorrectionsFG.collectedPreboilVol;\r\n        this.targetGrav = vals.brewCorrectionsFG.targetGrav;\r\n        this.measuredGrav = vals.brewCorrectionsFG.measuredGrav;\r\n        this.currWeight = vals.volMeasuringFG.currWeight;\r\n        this.emptyWeight = vals.volMeasuringFG.emptyWeight;\r\n        this.specificGrav = vals.volMeasuringFG.specificGrav;\r\n        this.measuredOG = vals.postBrewFG.measuredOG;\r\n        this.measuredFG = vals.postBrewFG.measuredFG;\r\n        this.potentialGrav = vals.postBrewFG.potentialGrav;\r\n\r\n        this.strikeTemp = (.2/(4*this.mashThickness)) * (this.targetMashTemp - this.grainTemp) + this.targetMashTemp;\r\n        this.strikeVol = this.grainWeight * this.mashThickness;\r\n        this.absVol = this.grainWeight * this.absRate;\r\n        this.preboilVol = 0+this.batchVol + 1*this.evapRate;\r\n        this.firstRunningsVol = this.strikeVol - (this.absVol + this.mashTunLoss);\r\n        this.spargeVol = this.preboilVol - this.firstRunningsVol;\r\n        let targetSG = this.convertToPts(this.targetOg);\r\n        let preboilSG = (targetSG*this.batchVol)/this.preboilVol;\r\n        this.estPreboilGrav = this.convertToGrav(preboilSG);\r\n\r\n        // Weight of addition = (Volume of wort * (Target gravity – Measured gravity)) / Extract potential points of addition\r\n        this.dmeAdd = (this.collectedPreboilVol * (this.convertToPts(this.targetGrav) - this.convertToPts(this.measuredGrav)))/45;\r\n\r\n        this.currVol = (this.currWeight - this.emptyWeight)/(8.32 * this.specificGrav);\r\n\r\n        this.efficiency = (1.0-this.measuredOG)/(1.0-this.potentialGrav);\r\n        this.abv = (this.measuredOG-this.measuredFG) * 131.25;\r\n\r\n    };\r\n\r\n    public isGT(a: any, b: any): boolean {\r\n        return a > b;\r\n    }\r\n\r\n    public isLT(a: any, b: any): boolean {\r\n        return a < b;\r\n    }\r\n\r\n    private convertToPts(grav: number) {\r\n        return (grav-1.0) * 1000;\r\n    }\r\n\r\n    private convertToGrav(pts: number) {\r\n        return (pts/1000.0) + 1.0;\r\n    }\r\n}","<div [formGroup]=\"mainGroup\">\r\n\r\n    <mat-toolbar color=\"primary\">\r\n        <span>Pre Brew Calculations:</span>\r\n    </mat-toolbar>\r\n\r\n    <mat-card>\r\n        \r\n        <div>\r\n            <div formGroupName=\"preBrewCalcsFG\">\r\n                <mat-form-field>\r\n                    <mat-label>Target Mash Temp (Farenheit):</mat-label>\r\n                    <input matInput type=\"number\" formControlName=\"targetMashTemp\">\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field>\r\n                    <mat-label>Grain Weight (lbs.):</mat-label>\r\n                    <input matInput type=\"number\" formControlName=\"grainWeight\">\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field>\r\n                    <mat-label>Estimated Absorption Rate (gal/lb):</mat-label>\r\n                    <input matInput type=\"number\" step=\".1\" formControlName=\"absRate\">\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field>\r\n                    <mat-label>Estimated Evaporation Rate (gal/hr):</mat-label>\r\n                    <input matInput type=\"number\" step=\".1\" formControlName=\"evapRate\">\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field>\r\n                    <mat-label>Estimated Mash Tun Loss:</mat-label>\r\n                    <input matInput type=\"number\" step=\".1\" formControlName=\"mashTunLoss\">\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field>\r\n                    <mat-label>Target OG:</mat-label>\r\n                    <input matInput type=\"number\" step=\".001\" formControlName=\"targetOg\">\r\n                </mat-form-field>\r\n                \r\n                <mat-form-field>\r\n                    <mat-label>Target Batch Volume (gal): </mat-label>\r\n                    <input matInput type=\"number\" step=\".1\" formControlName=\"batchVol\">\r\n                </mat-form-field>\r\n            </div>\r\n            \r\n            <div>\r\n                \r\n                <div>Strike Temp (F): {{strikeTemp}}</div>\r\n                <div>Strike Vol (gal): {{strikeVol}}</div>\r\n                <div>Absorption Vol (gal): {{grainWeight*absRate}}</div>\r\n                <div>First Runnings Vol (gal): {{firstRunningsVol}}</div>\r\n            </div>\r\n        </div>\r\n        \r\n        <div>\r\n            <div>\r\n                \r\n            </div>\r\n            \r\n            <div>\r\n                \r\n                <div>Sparge Vol (gal): {{spargeVol}}</div>\r\n                <div>Estimated Preboil Gravity: {{estPreboilGrav}}</div>\r\n            </div>\r\n        </div>\r\n    </mat-card>\r\n\r\n    <mat-toolbar color=\"primary\">\r\n        <span>Brew Corrections:</span>\r\n    </mat-toolbar>\r\n    <mat-card>\r\n        \r\n        <div formGroupName=\"brewCorrectionsFG\">\r\n            <mat-form-field>\r\n                <mat-label>Collected Pre Boil Volume (gal): </mat-label>\r\n                <input matInput type=\"number\" step=\".1\" formControlName=\"collectedPreboilVol\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Measured Gravity: </mat-label>\r\n                <input matInput type=\"number\" step=\".001\" formControlName=\"measuredGrav\">\r\n            </mat-form-field>\r\n            <mat-form-field>\r\n                <mat-label>Target Gravity: </mat-label>\r\n                <input matInput type=\"number\" step=\".001\" formControlName=\"targetGrav\">\r\n            </mat-form-field>\r\n        </div>\r\n        \r\n        <div>\r\n            <div>Light DME add (lbs): {{dmeAdd}}</div>\r\n            <div>Light DME add (oz): {{dmeAdd*16}}</div>\r\n        </div>\r\n    </mat-card>\r\n\r\n    <mat-toolbar color=\"primary\">\r\n        <span>Volume Measuring</span>\r\n    </mat-toolbar>\r\n    <mat-card>\r\n        \r\n        <div formGroupName=\"volMeasuringFG\">\r\n            <mat-form-field>\r\n                <mat-label>Current Weight (lbs):</mat-label>\r\n                <input matInput type=\"number\" formControlName=\"currWeight\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Empty Weight (lbs):</mat-label>\r\n                <input matInput type=\"number\" formControlName=\"emptyWeight\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Specific Gravity:</mat-label>\r\n                <input matInput type=\"number\" step=\".001\" formControlName=\"specificGrav\">\r\n            </mat-form-field>\r\n        </div>\r\n        \r\n        <div>\r\n            <div>Current Volume (gal):</div>\r\n            <div>{{currVol}}</div>\r\n        </div>\r\n    </mat-card>\r\n\r\n    <mat-toolbar color=\"primary\">\r\n        <span>Post Brew Calculations:</span>\r\n    </mat-toolbar>\r\n    <mat-card>\r\n        \r\n        <div formGroupName=\"postBrewFG\">\r\n            <mat-form-field>\r\n                <mat-label>Potential Gravity: </mat-label>\r\n                <input matInput type=\"number\" step=\".001\" formControlName=\"potentialGrav\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Measured OG: </mat-label>\r\n                <input matInput type=\"number\" step=\".001\" formControlName=\"measuredOG\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Measured FG: </mat-label>\r\n                <input matInput type=\"number\" step=\".001\" formControlName=\"measuredFG\">\r\n            </mat-form-field>\r\n        </div>\r\n        \r\n        <div>\r\n            <div>Efficiency: {{efficiency*100}}%</div>\r\n            <div>ABV: {{abv}}%</div>\r\n        </div>\r\n    </mat-card>\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'post-brew',\r\n  templateUrl: './post-brew.component.html',\r\n  styleUrls: ['./post-brew.component.css']\r\n})\r\nexport class PostBrewComponent implements OnInit {\r\n\r\n  // Post Brew Calculations\r\n  // - Efficiency\r\n  // - ABV\r\n  public potentialGrav = 1.084;\r\n  public measuredOG = 1.059;\r\n  public measuredFG = 1.060;\r\n  public efficiency: number;\r\n  public abv: number;\r\n\r\n  public postBrewFG: FormGroup;\r\n\r\n  constructor(private dialog: MatDialog) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.postBrewFG = new FormGroup({\r\n      potentialGrav: new FormControl(this.potentialGrav),\r\n      measuredOG: new FormControl(this.measuredOG),\r\n      measuredFG: new FormControl(this.measuredFG)\r\n    });\r\n\r\n    this.postBrewFG.valueChanges.subscribe(val => {\r\n      this.onChanges();\r\n    });\r\n\r\n    this.onChanges();\r\n  }\r\n\r\n  public onChanges = (): void => {\r\n    let vals = this.postBrewFG.getRawValue();\r\n    this.measuredOG = vals.measuredOG;\r\n    this.measuredFG = vals.measuredFG;\r\n    this.potentialGrav = vals.potentialGrav;\r\n\r\n    this.efficiency = (1.0 - this.measuredOG) / (1.0 - this.potentialGrav);\r\n    this.abv = (this.measuredOG - this.measuredFG) * 131.25;\r\n  };\r\n\r\n  public isGT(a: any, b: any): boolean {\r\n    return a > b;\r\n  }\r\n\r\n  public isLT(a: any, b: any): boolean {\r\n    return a < b;\r\n  }\r\n\r\n  private convertToPts(grav: number) {\r\n    return (grav - 1.0) * 1000;\r\n  }\r\n\r\n  private convertToGrav(pts: number) {\r\n    return (pts / 1000.0) + 1.0;\r\n  }\r\n}","<mat-toolbar color=\"primary\">\r\n    <span>Post Brew Calculations:</span>\r\n</mat-toolbar>\r\n<mat-card>\r\n    \r\n    <div [formGroup]=\"postBrewFG\">\r\n        <mat-form-field>\r\n            <mat-label>Potential Gravity: </mat-label>\r\n            <input matInput type=\"number\" step=\".001\" formControlName=\"potentialGrav\">\r\n        </mat-form-field>\r\n        \r\n        <mat-form-field>\r\n            <mat-label>Measured OG: </mat-label>\r\n            <input matInput type=\"number\" step=\".001\" formControlName=\"measuredOG\">\r\n        </mat-form-field>\r\n        \r\n        <mat-form-field>\r\n            <mat-label>Measured FG: </mat-label>\r\n            <input matInput type=\"number\" step=\".001\" formControlName=\"measuredFG\">\r\n        </mat-form-field>\r\n    </div>\r\n    \r\n    <div>\r\n        <div>Efficiency: {{efficiency*100}}%</div>\r\n        <div>ABV: {{abv}}%</div>\r\n    </div>\r\n</mat-card>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'misc',\r\n  templateUrl: './misc.component.html',\r\n  styleUrls: ['./misc.component.css']\r\n})\r\nexport class MiscComponent implements OnInit {\r\n\r\n  // Volume Measuring\r\n  // Assuming holding pot and standing on scale\r\n  // 8.32lbs/gal = 1kg/L\r\n  // vol = (currWeight-emptyWeight)/(8.32*specificGrav)\r\n  public currWeight = 12.0;\r\n  public emptyWeight = 3.0;\r\n  public specificGrav = 1.061;\r\n  public currVol: number;\r\n\r\n  public miscFG: FormGroup;\r\n\r\n\r\n  constructor(private dialog: MatDialog) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.miscFG = new FormGroup({\r\n      currWeight: new FormControl(this.currWeight),\r\n      emptyWeight: new FormControl(this.emptyWeight),\r\n      specificGrav: new FormControl(this.specificGrav),\r\n    });\r\n\r\n    this.miscFG.valueChanges.subscribe(val => {\r\n      this.onChanges();\r\n    });\r\n\r\n    this.onChanges();\r\n  }\r\n\r\n  public onChanges = (): void => {\r\n    let vals = this.miscFG.getRawValue();\r\n    this.currWeight = vals.currWeight;\r\n    this.emptyWeight = vals.emptyWeight;\r\n    this.specificGrav = vals.specificGrav;\r\n\r\n    this.currVol = (this.currWeight - this.emptyWeight) / (8.32 * this.specificGrav);\r\n  };\r\n\r\n  public isGT(a: any, b: any): boolean {\r\n    return a > b;\r\n  }\r\n\r\n  public isLT(a: any, b: any): boolean {\r\n    return a < b;\r\n  }\r\n\r\n  private convertToPts(grav: number) {\r\n    return (grav - 1.0) * 1000;\r\n  }\r\n\r\n  private convertToGrav(pts: number) {\r\n    return (pts / 1000.0) + 1.0;\r\n  }\r\n}","<mat-toolbar color=\"primary\">\r\n    <span>Volume Measuring</span>\r\n</mat-toolbar>\r\n<mat-card>\r\n    \r\n    <div [formGroup]=\"miscFG\">\r\n        <mat-form-field>\r\n            <mat-label>Current Weight (lbs):</mat-label>\r\n            <input matInput type=\"number\" formControlName=\"currWeight\">\r\n        </mat-form-field>\r\n        \r\n        <mat-form-field>\r\n            <mat-label>Empty Weight (lbs):</mat-label>\r\n            <input matInput type=\"number\" formControlName=\"emptyWeight\">\r\n        </mat-form-field>\r\n        \r\n        <mat-form-field>\r\n            <mat-label>Specific Gravity:</mat-label>\r\n            <input matInput type=\"number\" step=\".001\" formControlName=\"specificGrav\">\r\n        </mat-form-field>\r\n    </div>\r\n    \r\n    <div>\r\n        <div>Current Volume (gal):</div>\r\n        <div>{{currVol}}</div>\r\n    </div>\r\n</mat-card>","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'brew-sidekick';\n}\n","<nav-bar></nav-bar>\r\n<router-outlet></router-outlet>","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\nimport {MatCardModule} from '@angular/material/card';\r\nimport {MatDialogModule} from '@angular/material/dialog';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatIconModule} from '@angular/material/icon';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { LandingComponent } from './landing/landing.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { NavBarComponent } from './nav-bar/nav-bar.component';\r\nimport { PreBrewComponent } from './pre-brew/pre-brew.component';\r\nimport { PostBrewComponent } from './post-brew/post-brew.component';\r\nimport { CorrectionsComponent } from './corrections/corrections.component';\r\nimport { MiscComponent } from './misc/misc.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    LandingComponent,\r\n    NavBarComponent,\r\n    PreBrewComponent,\r\n    PostBrewComponent,\r\n    CorrectionsComponent,\r\n    MiscComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    AppRoutingModule,\r\n    MatCardModule,\r\n    MatInputModule,\r\n    MatToolbarModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatFormFieldModule,\r\n    MatToolbarModule,\r\n    MatDialogModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  providers: [\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'pre-brew',\r\n  templateUrl: './pre-brew.component.html',\r\n  styleUrls: ['./pre-brew.component.css']\r\n})\r\nexport class PreBrewComponent implements OnInit {\r\n\r\n  // Pre Brew Calculations\r\n  // - Strike Temp\r\n  // - Strike Vol\r\n  // - Abs Vol\r\n  // - First Runnings Vol\r\n  // - Sparge Vol\r\n  // - Est Pre Boil Grav\r\n  // - Pre Boil Vol\r\n  public targetMashTemp = 152.0;\r\n  public grainWeight = 10.0;\r\n  public absRate = 0.125;\r\n  public evapRate = 0.5;\r\n  public mashTunLoss = 0.21;\r\n  public targetOg = 1.060;\r\n  public batchVol = 5.0;\r\n\r\n  public mashThickness: number; // .3125gal/lb\r\n  public grainTemp: number;\r\n  public strikeTemp: number; //(.2/(4*mashThickness))(targetMashTemp - grainTemp) + targetMashTemp\r\n  public strikeVol: number; // grainWeight*mashThickness\r\n  public absVol: number; // grainWeight * absRate\r\n  public preboilVol: number; // batchVol + evapRate * boilHrs\r\n  public firstRunningsVol: number; // strikeVol - (absVol + mashTunLoss)\r\n  public spargeVol: number; // preboilVol - firstRunningsVol\r\n  public estPreboilGrav: number; // (targetOg*targetVol)/preboilVol\r\n\r\n  public preBrewCalcsFG: FormGroup;\r\n\r\n  constructor(private dialog: MatDialog) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.preBrewCalcsFG = new FormGroup({\r\n      targetOg: new FormControl(this.targetOg),\r\n      batchVol: new FormControl(this.batchVol),\r\n      targetMashTemp: new FormControl(this.targetMashTemp),\r\n      grainWeight: new FormControl(this.grainWeight),\r\n      absRate: new FormControl(this.absRate),\r\n      mashTunLoss: new FormControl(this.mashTunLoss),\r\n      evapRate: new FormControl(this.evapRate),\r\n    });\r\n    this.mashThickness = .3125;\r\n    this.grainTemp = 68;\r\n\r\n    this.preBrewCalcsFG.valueChanges.subscribe(val => {\r\n      this.onChanges();\r\n    });\r\n\r\n    this.onChanges();\r\n  }\r\n\r\n  public onChanges = (): void => {\r\n    let vals = this.preBrewCalcsFG.getRawValue();\r\n    this.targetMashTemp = vals.targetMashTemp;\r\n    this.grainWeight = vals.grainWeight;\r\n    this.batchVol = vals.batchVol;\r\n    this.evapRate = vals.evapRate;\r\n    this.absRate = vals.absRate;\r\n    this.mashTunLoss = vals.mashTunLoss;\r\n    this.targetOg = vals.targetOg;\r\n\r\n    this.strikeTemp = (.2 / (4 * this.mashThickness)) * (this.targetMashTemp - this.grainTemp) + this.targetMashTemp;\r\n    this.strikeVol = this.grainWeight * this.mashThickness;\r\n    this.absVol = this.grainWeight * this.absRate;\r\n    this.preboilVol = 0 + this.batchVol + 1 * this.evapRate;\r\n    this.firstRunningsVol = this.strikeVol - (this.absVol + this.mashTunLoss);\r\n    this.spargeVol = this.preboilVol - this.firstRunningsVol;\r\n    let targetSG = this.convertToPts(this.targetOg);\r\n    let preboilSG = (targetSG * this.batchVol) / this.preboilVol;\r\n    this.estPreboilGrav = this.convertToGrav(preboilSG);\r\n  };\r\n\r\n  public isGT(a: any, b: any): boolean {\r\n    return a > b;\r\n  }\r\n\r\n  public isLT(a: any, b: any): boolean {\r\n    return a < b;\r\n  }\r\n\r\n  private convertToPts(grav: number) {\r\n    return (grav - 1.0) * 1000;\r\n  }\r\n\r\n  private convertToGrav(pts: number) {\r\n    return (pts / 1000.0) + 1.0;\r\n  }\r\n}","<mat-toolbar color=\"primary\">\r\n    <span>Pre Brew Calculations:</span>\r\n</mat-toolbar>\r\n\r\n<mat-card>\r\n    \r\n    <div>\r\n        <div [formGroup]=\"preBrewCalcsFG\">\r\n            <mat-form-field>\r\n                <mat-label>Target Mash Temp (Farenheit):</mat-label>\r\n                <input matInput type=\"number\" formControlName=\"targetMashTemp\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Grain Weight (lbs.):</mat-label>\r\n                <input matInput type=\"number\" formControlName=\"grainWeight\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Estimated Absorption Rate (gal/lb):</mat-label>\r\n                <input matInput type=\"number\" step=\".1\" formControlName=\"absRate\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Estimated Evaporation Rate (gal/hr):</mat-label>\r\n                <input matInput type=\"number\" step=\".1\" formControlName=\"evapRate\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Estimated Mash Tun Loss:</mat-label>\r\n                <input matInput type=\"number\" step=\".1\" formControlName=\"mashTunLoss\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Target OG:</mat-label>\r\n                <input matInput type=\"number\" step=\".001\" formControlName=\"targetOg\">\r\n            </mat-form-field>\r\n            \r\n            <mat-form-field>\r\n                <mat-label>Target Batch Volume (gal): </mat-label>\r\n                <input matInput type=\"number\" step=\".1\" formControlName=\"batchVol\">\r\n            </mat-form-field>\r\n        </div>\r\n        \r\n        <div>\r\n            \r\n            <div>Strike Temp (F): {{strikeTemp}}</div>\r\n            <div>Strike Vol (gal): {{strikeVol}}</div>\r\n            <div>Absorption Vol (gal): {{grainWeight*absRate}}</div>\r\n            <div>First Runnings Vol (gal): {{firstRunningsVol}}</div>\r\n        </div>\r\n    </div>\r\n    \r\n    <div>\r\n        <div>\r\n            \r\n        </div>\r\n        \r\n        <div>\r\n            \r\n            <div>Sparge Vol (gal): {{spargeVol}}</div>\r\n            <div>Estimated Preboil Gravity: {{estPreboilGrav}}</div>\r\n        </div>\r\n    </div>\r\n</mat-card>","import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'corrections',\r\n  templateUrl: './corrections.component.html',\r\n  styleUrls: ['./corrections.component.css']\r\n})\r\nexport class CorrectionsComponent implements OnInit {\r\n\r\n  // Brew Corrections\r\n  // - Raise Pre Boil Grav\r\n  public collectedPreboilVol = 6.0;\r\n  public measuredGrav = 1.045;\r\n  public targetGrav = 1.065;\r\n  // Weight of addition = (Volume of wort * (Target gravity – Measured gravity)) / Extract potential points of addition\r\n  // Light DME Potential Extract: 1.045\r\n  public dmeAdd: number;\r\n\r\n  public correctionsFG: FormGroup;\r\n\r\n\r\n  constructor(private dialog: MatDialog) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.correctionsFG = new FormGroup({\r\n      collectedPreboilVol: new FormControl(this.collectedPreboilVol),\r\n      measuredGrav: new FormControl(this.measuredGrav),\r\n      targetGrav: new FormControl(this.targetGrav),\r\n    });\r\n\r\n    this.correctionsFG.valueChanges.subscribe(val => {\r\n      this.onChanges();\r\n    });\r\n\r\n    this.onChanges();\r\n  }\r\n\r\n  public onChanges = (): void => {\r\n    let vals = this.correctionsFG.getRawValue();\r\n    this.collectedPreboilVol = vals.collectedPreboilVol;\r\n    this.targetGrav = vals.targetGrav;\r\n    this.measuredGrav = vals.measuredGrav;\r\n\r\n    // Weight of addition = (Volume of wort * (Target gravity – Measured gravity)) / Extract potential points of addition\r\n    this.dmeAdd = (this.collectedPreboilVol * (this.convertToPts(this.targetGrav) - this.convertToPts(this.measuredGrav))) / 45;\r\n  };\r\n\r\n  public isGT(a: any, b: any): boolean {\r\n    return a > b;\r\n  }\r\n\r\n  public isLT(a: any, b: any): boolean {\r\n    return a < b;\r\n  }\r\n\r\n  private convertToPts(grav: number) {\r\n    return (grav - 1.0) * 1000;\r\n  }\r\n\r\n  private convertToGrav(pts: number) {\r\n    return (pts / 1000.0) + 1.0;\r\n  }\r\n}","<mat-toolbar color=\"primary\">\r\n    <span>Brew Corrections:</span>\r\n</mat-toolbar>\r\n<mat-card>\r\n    \r\n    <div [formGroup]=\"correctionsFG\">\r\n        <mat-form-field>\r\n            <mat-label>Collected Pre Boil Volume (gal): </mat-label>\r\n            <input matInput type=\"number\" step=\".1\" formControlName=\"collectedPreboilVol\">\r\n        </mat-form-field>\r\n        \r\n        <mat-form-field>\r\n            <mat-label>Measured Gravity: </mat-label>\r\n            <input matInput type=\"number\" step=\".001\" formControlName=\"measuredGrav\">\r\n        </mat-form-field>\r\n        <mat-form-field>\r\n            <mat-label>Target Gravity: </mat-label>\r\n            <input matInput type=\"number\" step=\".001\" formControlName=\"targetGrav\">\r\n        </mat-form-field>\r\n    </div>\r\n    \r\n    <div>\r\n        <div>Light DME add (lbs): {{dmeAdd}}</div>\r\n        <div>Light DME add (oz): {{dmeAdd*16}}</div>\r\n    </div>\r\n</mat-card>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CorrectionsComponent } from './corrections/corrections.component';\r\nimport { LandingComponent } from './landing/landing.component';\r\nimport { MiscComponent } from './misc/misc.component';\r\nimport { PostBrewComponent } from './post-brew/post-brew.component';\r\nimport { PreBrewComponent } from './pre-brew/pre-brew.component';\r\n\r\nconst appRoutes: Routes = [\r\n    {path: '', component: PreBrewComponent, pathMatch: 'full'},\r\n    {path: 'pre-brew', component: PreBrewComponent, pathMatch: 'full'},\r\n    {path: 'post-brew', component: PostBrewComponent, pathMatch: 'full'},\r\n    {path: 'corrections', component: CorrectionsComponent, pathMatch: 'full'},\r\n    {path: 'misc', component: MiscComponent, pathMatch: 'full'},\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forRoot(appRoutes)\r\n    ],\r\n    exports: [\r\n        RouterModule\r\n    ]\r\n})\r\nexport class AppRoutingModule {\r\n\r\n}","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"]}